// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	TargetAction
	BasicResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Target message describes a TUF target
type TargetAction struct {
	Gun    string            `protobuf:"bytes,1,opt,name=gun" json:"gun,omitempty"`
	Name   string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Length int64             `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Hashes map[string][]byte `protobuf:"bytes,4,rep,name=hashes" json:"hashes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Custom []byte            `protobuf:"bytes,5,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (m *TargetAction) Reset()                    { *m = TargetAction{} }
func (m *TargetAction) String() string            { return proto.CompactTextString(m) }
func (*TargetAction) ProtoMessage()               {}
func (*TargetAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TargetAction) GetGun() string {
	if m != nil {
		return m.Gun
	}
	return ""
}

func (m *TargetAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TargetAction) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *TargetAction) GetHashes() map[string][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *TargetAction) GetCustom() []byte {
	if m != nil {
		return m.Custom
	}
	return nil
}

// BasicResponse describes a response with a true/false success indicator,
// and if false, an error type and message. See the errors.go file in this
// package for the possible errors and a translation function between the
// BasicResponse object and a concrete error type.
type BasicResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BasicResponse) Reset()                    { *m = BasicResponse{} }
func (m *BasicResponse) String() string            { return proto.CompactTextString(m) }
func (*BasicResponse) ProtoMessage()               {}
func (*BasicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BasicResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BasicResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TargetAction)(nil), "api.TargetAction")
	proto.RegisterType((*BasicResponse)(nil), "api.BasicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notary service

type NotaryClient interface {
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(ctx context.Context, in *TargetAction, opts ...grpc.CallOption) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(ctx context.Context, in *TargetAction, opts ...grpc.CallOption) (*BasicResponse, error)
}

type notaryClient struct {
	cc *grpc.ClientConn
}

func NewNotaryClient(cc *grpc.ClientConn) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) AddTarget(ctx context.Context, in *TargetAction, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/AddTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) RemoveTarget(ctx context.Context, in *TargetAction, opts ...grpc.CallOption) (*BasicResponse, error) {
	out := new(BasicResponse)
	err := grpc.Invoke(ctx, "/api.Notary/RemoveTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notary service

type NotaryServer interface {
	// AddTarget adds a target to the TUF repository and re-signs.
	AddTarget(context.Context, *TargetAction) (*BasicResponse, error)
	// RemoveTarget deletes a target from the TUF repository and re-signs. It only
	// uses the `name` field from the Target object, ignoring all other fields
	RemoveTarget(context.Context, *TargetAction) (*BasicResponse, error)
}

func RegisterNotaryServer(s *grpc.Server, srv NotaryServer) {
	s.RegisterService(&_Notary_serviceDesc, srv)
}

func _Notary_AddTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).AddTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/AddTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).AddTarget(ctx, req.(*TargetAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_RemoveTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).RemoveTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Notary/RemoveTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).RemoveTarget(ctx, req.(*TargetAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTarget",
			Handler:    _Notary_AddTarget_Handler,
		},
		{
			MethodName: "RemoveTarget",
			Handler:    _Notary_RemoveTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0x6d, 0xda, 0xbc, 0x66, 0x1a, 0x41, 0x07, 0x91, 0xa5, 0x20, 0x84, 0x9c, 0x72,
	0xca, 0xa1, 0x2a, 0xfe, 0xb9, 0x55, 0x11, 0x3c, 0x79, 0x58, 0xfc, 0x02, 0x6b, 0x3a, 0x24, 0xa1,
	0xcd, 0x6e, 0xc8, 0x6e, 0x2a, 0xf9, 0xa2, 0x7e, 0x1e, 0xc9, 0x26, 0x81, 0x8a, 0x27, 0x6f, 0xf3,
	0x9b, 0x99, 0x9d, 0xe7, 0x79, 0x58, 0x08, 0x64, 0x5d, 0xa6, 0x75, 0xa3, 0xad, 0x46, 0x4f, 0xd6,
	0x65, 0xfc, 0xc5, 0x20, 0x7c, 0x97, 0x4d, 0x4e, 0x76, 0x93, 0xd9, 0x52, 0x2b, 0x3c, 0x03, 0x2f,
	0x6f, 0x15, 0x67, 0x11, 0x4b, 0x02, 0xd1, 0x97, 0x88, 0x30, 0x57, 0xb2, 0x22, 0x3e, 0x73, 0x2d,
	0x57, 0xe3, 0x25, 0xf8, 0x7b, 0x52, 0xb9, 0x2d, 0xb8, 0x17, 0xb1, 0xc4, 0x13, 0x23, 0xe1, 0x2d,
	0xf8, 0x85, 0x34, 0x05, 0x19, 0x3e, 0x8f, 0xbc, 0x64, 0xb9, 0xbe, 0x4a, 0x7b, 0xbd, 0x63, 0x81,
	0xf4, 0xd5, 0xcd, 0x5f, 0x94, 0x6d, 0x3a, 0x31, 0x2e, 0xf7, 0xe7, 0xb2, 0xd6, 0x58, 0x5d, 0xf1,
	0x45, 0xc4, 0x92, 0x50, 0x8c, 0xb4, 0x7a, 0x80, 0xe5, 0xd1, 0x7a, 0xef, 0x6d, 0x47, 0xdd, 0xe4,
	0x6d, 0x47, 0x1d, 0x5e, 0xc0, 0xe2, 0x20, 0xf7, 0xed, 0x60, 0x2e, 0x14, 0x03, 0x3c, 0xce, 0xee,
	0x59, 0xfc, 0x0c, 0xa7, 0x4f, 0xd2, 0x94, 0x99, 0x20, 0x53, 0x6b, 0x65, 0x08, 0x39, 0xfc, 0x37,
	0x6d, 0x96, 0x91, 0x31, 0xee, 0xc0, 0x89, 0x98, 0xb0, 0x9f, 0x54, 0x64, 0x8c, 0xcc, 0xa7, 0x8c,
	0x13, 0xae, 0x3f, 0xc1, 0x7f, 0xd3, 0x56, 0x36, 0x1d, 0xde, 0x40, 0xb0, 0xd9, 0x6e, 0x87, 0x20,
	0x78, 0xfe, 0x2b, 0xd5, 0x0a, 0x5d, 0xeb, 0x87, 0x62, 0xfc, 0x0f, 0xef, 0x20, 0x14, 0x54, 0xe9,
	0x03, 0xfd, 0xf1, 0xe1, 0x87, 0xef, 0xbe, 0xe8, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x9e,
	0x39, 0x36, 0xaf, 0x01, 0x00, 0x00,
}
